I. giới thiệu qua về python
- python là một ngôn ngữ lập trình bậc cao, hướng đối tượng, học python khá là đơn giản và dễ dàng.
- python là một ngôn ngữ thông dịch, tức là khi mình code đến đâu, thì nó dịch đến đó, như vậy thì việc debug phát hiện ra lỗi dễ dàng hơn, kết quả cũng được hiển thị ra ngay sau khi code.
- cú pháp của python tương đối dễ dàng để học, và dễ dàng hơn khi bạn đã học ngôn ngữ C,C++,OOP
II. những gì đã được học trong thời gian qua.
- do trước đây em đã học C,C++,JAVA nên các vấn đề cơ bản em sẽ không đề cập đến, em chỉ đưa ra những vấn đề mới chỉ có trong python mà em chưa được học, cũng như các vấn đề cần lưu ý:
1.các kiểu dữ liệu: 
- ngoài kiểu cơ bản như: number, string, int,... trong python còn có thêm 3 kiểu dữ liệu là List, Tuple, Dictionary
a. List:
- list là kiểu dữ liệu được lưu trữ dưới dạng dãy(sequence).
-list lưu trữ một dãy các kiểu giá trị khác nhau( kiểu int, float, string, object.. được lưu trong một list), được phân biệt bởi các dấu phẩy.
vd: 
	list1=['vatly', 2014,'hello'] # được bao quanh bởi dấu ngoặc vuông.
	list2=[1,2,3]
	print(list1[2])	#goi mot phan tu o vi tri thu 2 trong list1
	list3 = list1+list2 #thuc hiện thao tác nối chuỗi với toán tử +
	print(list1*2) #chuỗi trong list1 lặp lại hai lần.
 	list1.append(10) #thêm phần tử 10 vào sau list1
	del(list1[1] #xóa phần tử thứ 1 trong list1
	del(list1[1:3]) #xóa phần tử từ vị trí thứ 1 -> vị trí thứ 2 trong list1
- ngoài ra, chúng ta còn các hàm như: hàm so sánh cmp(list1,list2), len(list1) trả về độ dài của list1, max(list), min(list) trả về giá trị lớn nhất và nhỏ nhất trong list,....(có thể tham khảo thêm trên trang: https://www.tutorialspoint.com/python3/python_lists.htm)
b. tuple
-về cơ bản tuple cũng là một dãy các đối tượng giống như list, nhưng tuple là một dãy các đối tượng không thay đổi.
- tuple sử dụng cặp dấu () để bao các phần tử trong dãy ( không giống list: bao các phần tử bởi cặp dẫu []).	
- lợi ích của việc lưu trữ dữ liệu bằng tuple: Trình xử lý các tuple là nhanh hơn các List,các dữ liệu cần được lưu trữ quan trọng, không muốn thay đổi về giá trị.

c. Dictionary
- dictionary lưu trữ các giá trị dưới dạng (key,value), với mỗi key thì tương ứng một giá trị value, và các key trong 1 dict là khác nhau.
- Các cặp key,value trong 1 dict được cách nhau bởi dấu phẩy, và 1 dict bao quanh tất cả các cặp bởi cặp dấu {}.
-key có thể là số, string hoặc là tuple
vd:	dict={'name': 'Nguyen Van Dan','age':20, 'gender': 'male'}
	print("ten sinh vien: ", dict[name]) #in ra tên của key có giá trị là name
	print("thong tin: ",dict) #in ra tất cả các cặp (key,value) có trong dict
	print("keys: ", dict.keys()) #chỉ in ra tất cả các tên key có trong dict.
	print("keys: ",dict.values()) #chỉ in ra tất cả các giá trị có trong dict
	del dict['name'] #xóa cặp key,value có key='name'
	del dict 	#xóa cả Dictionary.
- ngoài ra, Dictionary cũng có các phương thức được xây dựng sẵn như: cmp(). len(),type(),....(có thể tham khảo đọc thêm trên trang https://www.tutorialspoint.com/python3/python_dictionary.htm)

2.hàm trong python
- hàm dùng để định nghĩa một tính năng, chức năng nào đó, tuân thủ theo quy tắc: 
	+ từ khóa def được sử dụng để xác định phần bắt đầu của 1 hàm.
	+ theo sau def là ten_ham, theo sau ten_ham là dấu ():
	+ trong cặp dấu là các tham số (có thể có hoặc không).
	+ để định nghĩa các câu lệnh trong 1 hàm, các câu lệnh bên trong được thụt dòng với một 	  space nào 	      đó
	+ dòng đầu tiên trong thâm hàm là 1 Documentation string (có thể có hoặc không)
vd: 	def myfunction():
		"this is documentation string"
		print("hello world!")
		return
	myfunction()	#kqua: hello world!
- truyền tham chiếu trong python: trong python chỉ cho phép truyền tham chiếu, tức là giá trị của một biến bên ngoài khi truyền vào trong hàm có thể bị thay đổi khi có sự thay đổi trong hàm đó.
	vd: def changed(a):
		a.append(100)
		print(a)
		return
	    mylist=[1,2,3,4]
	    changed(mylist) #kq: [1,2,3,4,100]
	    print(mylist)   #kq: [1,2,3,4,100]
  + xét thêm vidu:
	def changed(a):
		a=[10,20,30,40]
		print(a)
		return
	mylist=[1,2,3,4]
	changed(mylist) #kq: [10,20,30,40]
	print(mylist) #kq: [1,2,3,4]
 với ví dụ trên, ta thấy kết quả trong hàm và ngoài hàm là khác nhau, như vậy tại sao nó khác nhau? - về mặt bản chất, các biến mylist và tham số a đều là các con trỏ, như vậy, khi gọi làm changed(mylist), khi đó a sẽ được trỏ đến vị trí của mylist(a==mylist), nhưng khi gán a=[10,20,30,40] thì khi đó, hệ thống sẽ khởi tạo vùng nhớ để lưu các giá trị trước, sau đó a lại được trỏ đến vị trí mới chứa các giá trị đó, nên các giá trị trong mylist không bị thay đổi, do đó mylist trỏ đến 1 vị trí, a trỏ đến một vị trí khác. như vậy khi in ra, thì kết quả sẽ khác nhau.
3. module trong python
- module được dùng để phân loại code có liên quan đến nhau, nói cách khác, module giúp việc tổ chức code một cách dễ dàng, logic, dễ hiểu.
- trong một module có các hàm, biến đã được định nghĩa sẵn.
- module có khả năng tái sử dụng code, tức là nó có thể được sử dụng ở nhiều chương trình khác nhau.
- để sử dụng module ta sử dụng cú pháp: import ten_module
	vd: trong một file có tên add.py có chứa các câu lệnh sau: 
			def addition(a,b):
				c=a+b
				print(c)
				return 
	- một file có tên display.py có chứa các các câu lệnh: 
			a=10
			b=20
	như vậy để file display.py sử dụng các câu lệnh của add.py :
			import add
			a,b=10,20
			addition(a,b) #kq: 30
- như vậy để 1 file muốn sử dụng nhiều module khác nhau ta sử dụng cú pháp: import module1,module2,...
- trong một chương trình, nếu ta chỉ muốn sử dụng 1 thuộc tính or hàm của một module thì ta sd cú pháp: import ten_module from ten_ham1,ten_ham2...
4. class
- để sử dụng class trong python ta sử dụng cú pháp class <tên_class>: để khai báp.
	vd: class Sinhvien:
		"""this is Sinhvien"""
		count=0
		def __init__(self,name,age):
			self.name=name
			self.age=age
		def display(self):
			print("name: ",self.name, " age: ",self.age)
	    sv1=Sinhvien("Nguyen Van Dan",20)
- đoạn code trên định nghĩa một class có tên là Sinhvien với :
	+ dòng đầu là một Documentation string
	+ count=0 là thuộc tính của lớp Sinhvien ( nó là biến chung cho tất cả các đối tượng được 		  khởi tạo từ class Sinhvien đó.) -giống thuộc tính static của class trong java.
	+ def __init__(): là một phương thức constructor của class Sinhvien, khi một thực thể 		   được định nghĩa, thì hàm này sẽ được khởi chạy đầu tiên.
	+ def display(self): chỉ là một phương thức của class đó.
	+ sv1=Sinhvien("NGuyen Van Dan",20) : tạo một thực thể từ class Sinhvien.
	+ biến self được định nghĩa giống như con trỏ this trong C,Java.
- tính kế thừa: đơn giản chỉ là một class kế thừa 1 hoặc nhiều class khác, khi kế thừa thì lớp con sẽ kế thừa các thuộc tính, phương thức của lớp cha, như vậy lớp con có thể sử dụng các phương thức, thuộc tính như thể là chúng đã được định nghĩa trong lớp con vậy.
- khi kế thừa từ lớp cha, lớp con có thể thực hiện ghi đè(override) các phương thức của lớp cha, để thể hiện rằng, với mỗi đối tượng thuộc lớp con sẽ có hành vi ứng xử khác với đối tượng thuộc lớp cha. và để lớp con sử dụng phương thức của lớp cha mà nó đã ghi đè, ta sử dụng super() để gọi ( super().ten_phuongthuc())
- và trong một class, các phương thức có thể nạp chồng( có cùng tên phương thức, nhưng khác tham số).
- class trong python chỉ tồn tại 2 kiểu giới hạn truy cập là public và private.
- lớp con chỉ có thể kế thừa các phương thức và thuộc tính có quyền truy cập là public.
- các thuộc tính, phương thức có quyền truy cập là private thì được ký hiệu: __ (vd: __a=100), và kết thúc tối đa bởi 1 dấu gạch dưới. vd: __a_="hello"
- và để có thể truy cập các thuộc tính là private, ta sử dụng cú pháp: tendoituong._tenlop__tenthuoctinh.

	


